@page "/match"
@using MatchFrontend.Data
@using System.Net.Http
@using System.Web
@using MatchLibrary.ApiModel
@inject NavigationManager NavigationManager
@inject ApiService ApiSrv
@inject Microsoft.Extensions.Localization.IStringLocalizer<ListMatches> Localizer

<h1>@Localizer["MatchList"]</h1>

<a href="/addmatch">@Localizer["MatchCreate"]</a>

@if (MatchList == null || TeamList == null || TournamentList == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Localizer["Team1"]</th>
                <th>@Localizer["Team2"]</th>
                <th>@Localizer["Score"]</th>
                <th>@Localizer["ScheduledTime"]</th>
                <th>@Localizer["Status"]</th>
                <th>@Localizer["Tournament"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in MatchList)
            {
            <tr>
                <td>
                    @if (!match.Team1Id.HasValue || match.Team1Id.Value == 0)
                    {
                        @match.NameTeam1;
                    }
                    else
                    {
                        @TeamList.Single(x => x.Id == match.Team1Id).Name;
                    }
            </td>
            <td>
                @if (!match.Team2Id.HasValue || match.Team2Id.Value == 0)
                {
                    @match.NameTeam2;
                }
                else
                {
                    @TeamList.Single(x => x.Id == match.Team2Id).Name;
                }
            </td>
            <td>@match.ScoreTeam1:@match.ScoreTeam2</td>
            <td>@match.ScheduledTime</td>
            <td>@Localizer["MatchStatus" + Enum.GetName(typeof(MatchLibrary.Model.EnumMatchStatus), @match.MatchStatus)]</td>
            <td>@(match.TournamentId.HasValue ? TournamentList.SingleOrDefault(x => x.Id == match.TournamentId.Value).Name : "")</td>
            <td><a href="/match/@match.Id">@Localizer["MatchManage"]</a></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DtoMatch> MatchList = null;
    private List<DtoTournament> TournamentList = null;
    private List<DtoTeam> TeamList = null;


    protected override async Task OnInitializedAsync()
    {
        MatchList = await ApiSrv.GetMatchListAsync();
        TournamentList = await ApiSrv.GetTournamentListAsync();
        TeamList = await ApiSrv.GetTeamListAsync();
    }

    private string SecondsToTime(int seconds)
    {
        return ((seconds / 60).ToString("D2") + ":" + (seconds % 60).ToString("D2"));
    }
}
