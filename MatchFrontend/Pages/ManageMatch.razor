
@page "/match/{id}"
@using MatchFrontend.Data
@using System.Net.Http
@using System.Web
@using MatchLibrary.ApiModel
@inject NavigationManager NavigationManager
@inject ApiService ApiSrv
@inject Microsoft.Extensions.Localization.IStringLocalizer<ManageMatch> Localizer

@if (Match == null || TeamList == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{

    <div class="text-center">
        <table class="table">
            <tr>
                <td><h1>@Match.NameTeam1</h1></td>
                <td>&nbsp;&nbsp;&nbsp;</td>
                <td><h1>@Match.NameTeam2</h1></td>
            </tr>
            <tr>
                <td><h1>@Match.ScoreTeam1</h1></td>
                <td>&nbsp;&nbsp;&nbsp;</td>
                <td><h1>@Match.ScoreTeam2</h1></td>
            </tr>
            <tr>
                <td><button class="btn btn-primary" @onclick="GoalTeam1">@Localizer["ScoreTeam1"]</button></td>
                <td>&nbsp;&nbsp;&nbsp;</td>
                <td><button class="btn btn-primary" @onclick="GoalTeam2">@Localizer["ScoreTeam2"]</button></td>
            </tr>
            <tr>
                <td><button class="btn btn-primary" @onclick="UngoalTeam1">@Localizer["Undo"]</button></td>
                <td>&nbsp;&nbsp;&nbsp;</td>
                <td><button class="btn btn-primary" @onclick="UngoalTeam2">@Localizer["Undo"]</button></td>
            </tr>
        </table>
    </div>
    <br />
    <h1 class="text-center">@Localizer["Timeleft"]:</h1>
    <h1 class="text-center">@TimeLeftMinutes.ToString("D2"):@TimeLeftSeconds.ToString("D2")</h1>
    <br />

    <br />

    <button class="btn btn-primary" @onclick="StartGame">@Localizer["StartMatch"]</button>
    <a>&nbsp; &nbsp;</a>
    <button class="btn btn-primary" @onclick="StopGame">@Localizer["PauseMatch"]</button>
    <br />
    <br />
    <br />


    <EditForm Model="@Match" OnValidSubmit="@SaveMatch">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="panel">
            <button class="btn btn-primary" @onclick="e => this.EditCollapsed = !this.EditCollapsed">
                @( this.EditCollapsed ? Localizer["ShowMatchDetails"] : Localizer["HideMatchDetails"])
            </button>
            <div class="panel @(EditCollapsed?"collapse":"")">
                <a>@Localizer["Team1"]</a>
                <select id="cmbMatchCustomTeam1" class="form-control" @onchange=@Team1Changed>
                    <option selected value="0">@Localizer["CustomTeam1"]</option>
                    @foreach (var team in TeamList)
                    {
                        @if (team.Id == Match.Team1Id)
                        {
                            <option selected value="@team.Id">@team.Name</option>
                        }
                        else
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    }
                </select>

                <div class="panel @(Team1NameCollapsed?"collapse":"")">
                    <InputText id="txtMatchTeam1" type="text" class="form-control" placeholder="@Localizer["Team1Name"]" @bind-Value="@Match.NameTeam1" />
                    <ValidationMessage For="@(() => Match.NameTeam1)" />
                </div>
                <br />

                <a>@Localizer["Team2"]</a>
                <select id="cmbMatchCustomTeam2" class="form-control" @onchange=@Team2Changed>
                    <option selected value="0">@Localizer["CustomTeam2"]</option>
                    @foreach (var team in TeamList)
                    {
                        @if (team.Id == Match.Team1Id)
                        {
                            <option selected value="@team.Id">@team.Name</option>
                        }
                        else
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    }
                </select>

                <div class="panel @(Team2NameCollapsed?"collapse":"")">
                    <InputText id="txtMatchTeam2" type="text" class="form-control" placeholder="@Localizer["Team2Name"]" @bind-Value="@Match.NameTeam2" />
                    <ValidationMessage For="@(() => Match.NameTeam2)" />
                </div>
                <br />

                <a>@Localizer["TimeleftSeconds"]</a>
                <input id="txtLenght" class="form-control" type="text" @bind="Match.TimeLeftSeconds" />
                <br />

                <a>@Localizer["ScoresTeam1"]</a>
                <input id="txtScoreTeam1" class="form-control" type="text" @bind="@Match.ScoreTeam1" />
                <br />

                <a>@Localizer["ScoresTeam2"]</a>
                <input id="txtScoreTeam2" class="form-control" type="text" @bind="@Match.ScoreTeam2" />
                <br />

                <a>@Localizer["ScheduledTime"]</a>
                <input id="txtScheduledTime" class="form-control" width="150" type="time" @bind="@Match.ScheduledTime" />
                <br />

                <a>@Localizer["ScheduledDate"]</a>
                <input id="txtScheduledDate" class="form-control" width="150" type="date" @bind="@Match.ScheduledTime" />
                <br />

                <button class="btn btn-primary" type="submit">@Localizer["Save"]</button>

            </div>
        </div>
    </EditForm>
}

@code {
    private DtoMatch Match;
    private DtoTeam[] TeamList;

    [Parameter]
    public string Id { get; set; }
    private bool EditCollapsed = true;

    private int TimeLeftMinutes { get { return Match.TimeLeftSeconds.Value / 60; } }
    private int TimeLeftSeconds { get { return Match.TimeLeftSeconds.Value % 60; } }
    private System.Timers.Timer tmrMatchtime = new System.Timers.Timer(1000);

    private bool Team1NameCollapsed = false;
    private bool Team2NameCollapsed = false;

    protected override async Task OnInitializedAsync()
    {
        Match = await ApiSrv.GetMatchAsync(Convert.ToInt32(Id));
        TeamList = (await ApiSrv.GetTeamListAsync()).ToArray();

        tmrMatchtime.Elapsed += OnTmrMatchtimeElapsed;
        tmrMatchtime.Start();
    }

    private async void SaveMatch()
    {
        await ApiSrv.SetMatchAsync(Match);
    }

    private async void OnTmrMatchtimeElapsed(Object source, System.Timers.ElapsedEventArgs e)
    {
        //Match.TimeLeftSeconds = await ApiSrv.GetMatchTimeAsync(Match.Id);
        var updatedData = await ApiSrv.GetMatchAsync(Match.Id);
        Match.TimeLeftSeconds = updatedData.TimeLeftSeconds;

        if (Match.ScoreTeam1 != updatedData.ScoreTeam1)
            await ApiSrv.SetMatchGoalAsync(Match.Id, 0, Match.ScoreTeam1.Value - updatedData.ScoreTeam1.Value);

        if (Match.ScoreTeam2 != updatedData.ScoreTeam2)
            await ApiSrv.SetMatchGoalAsync(Match.Id, 1, Match.ScoreTeam2.Value - updatedData.ScoreTeam2.Value);


        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void StartGame()
    {
        await ApiSrv.ControlMatchtimeAsync(Match.Id, "start");
    }

    private async void StopGame()
    {
        await ApiSrv.ControlMatchtimeAsync(Match.Id, "stop");
    }

    private async void GoalTeam1()
    {
        await ApiSrv.SetMatchGoalAsync(Match.Id, 0, 1);
        Match.ScoreTeam1++;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void GoalTeam2()
    {
        await ApiSrv.SetMatchGoalAsync(Match.Id, 1, 1);
        Match.ScoreTeam2++;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void UngoalTeam1()
    {
        await ApiSrv.SetMatchGoalAsync(Match.Id, 0, -1);
        Match.ScoreTeam1--;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void UngoalTeam2()
    {
        await ApiSrv.SetMatchGoalAsync(Match.Id, 1, -1);
        Match.ScoreTeam2--;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    void Team1Changed(ChangeEventArgs e)
    {
        Match.Team1Id = Convert.ToInt32(e.Value);
        if (Match.Team1Id == 0)
        {
            Team1NameCollapsed = false;
            Match.NameTeam1 = "";
        }
        else
        {
            Team1NameCollapsed = true;
            Match.NameTeam1 = "None";
        }
    }


    void Team2Changed(ChangeEventArgs e)
    {
        Match.Team2Id = Convert.ToInt32(e.Value);
        if (Match.Team2Id == 0)
        {
            Team2NameCollapsed = false;
            Match.NameTeam2 = "";
        }
        else
        {
            Team2NameCollapsed = true;
            Match.NameTeam2 = "None";
        }
    }
}