
@page "/tournament/{id}"
@using MatchFrontend.Data
@using System.Net.Http
@using System.Web
@using MatchLibrary.ApiModel
@inject NavigationManager NavigationManager
@inject ApiService ApiSrv

@if (Tournament == null || Matches == null)
{
    <p><em>Lade...</em></p>
}
else
{
    <h1>Matchliste</h1>
    <a href="/addmatch">Match erstellen</a>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Team1</th>
                <th>Team2</th>
                <th>Restzeit</th>
                <th>Punkte Team1</th>
                <th>Punkte Team2</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Matches != null)
            {
                @foreach (var match in Matches)
                {
                    <tr>                        
                        <td>@match.NameTeam1</td>
                        <td>@match.NameTeam2</td>
                        <td>@match.TimeLeftSeconds</td>
                        <td>@match.ScoreTeam1</td>
                        <td>@match.ScoreTeam2</td>
                        <td><a href="/match/@match.Id">Verwalten</a></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <br />
    <div class="panel border">
        @*<h3>Turnier Details ändern</h3>*@
        <button class="btn btn-primary" @onclick="e => this.EditCollapsed = !this.EditCollapsed">
            @( this.EditCollapsed ? "Zeige Turnierdetails" : "Verstecke Details")
        </button>
        <div class="panel border @(EditCollapsed?"collapse":"")">
            <EditForm Model="@Tournament" OnValidSubmit="@SaveTournament">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <a>Name</a>
                <InputText id="txtTournamentName" type="text" class="form-control" @bind-Value="Tournament.Name" />
                <ValidationMessage For="@(() => Tournament.Name)" />
                <br />

                <a>Datum</a>
                <InputDate id="txtTournamentDate" type="date" class="form-control" @bind-Value="Tournament.Date" />
                <ValidationMessage For="@(() => Tournament.Date)" />
                <br />

                <a>Stadt</a>
                <InputText id="txtTournamentCity" type="text" class="form-control" @bind-Value="Tournament.City" />
                <ValidationMessage For="@(() => Tournament.City)" />
                <br />

                <a>Spielstätte</a>
                <InputText id="txtTournamentLocation" type="text" class="form-control" @bind-Value="Tournament.Location" />
                <ValidationMessage For="@(() => Tournament.Location)" />
                <br />

                <a>Organisator</a>
                <InputText id="txtTournamentOrganisator" type="text" class="form-control" @bind-Value="Tournament.Organisator" />
                <ValidationMessage For="@(() => Tournament.Organisator)" />
                <br />

                <button class="btn btn-primary" type="submit">Speichern</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private DtoTournament Tournament;
    private List<DtoMatch> Matches;
    private bool EditCollapsed = true;

    [Parameter]
    public string Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Tournament = await ApiSrv.GetTournamentAsync(Convert.ToInt32(Id));
        Matches = await ApiSrv.GetMatchListAsync(Tournament.Id) ?? new List<DtoMatch>();
    }

    private async void SaveTournament()
    {
        await ApiSrv.SetTournamentAsync(Tournament);
        NavigationManager.NavigateTo("/tournament");
    }

}