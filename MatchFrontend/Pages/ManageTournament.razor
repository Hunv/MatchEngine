@page "/tournament/{id}"
@using MatchFrontend.Data
@using System.Net.Http
@using System.Web
@using MatchLibrary.ApiModel
@inject NavigationManager NavigationManager
@inject ApiService ApiSrv
@inject Microsoft.Extensions.Localization.IStringLocalizer<ManageTournament> Localizer
@inject MatchFrontend.Data.Settings Settings

@if (Tournament == null || Matches == null || TeamList == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else if (Settings.SelectedTournamentId == 0)
{
    <p>@Localizer["SelectTournamentFirst"]</p>
}
else
{
    <h1>@Localizer["MatchList"]</h1>
    <a href=@("/addmatch?tournamentid=" + Id)>@Localizer["MatchCreate"]</a>
    <br />
    @if (Matches.Count == 0)
    {
        @Localizer["NoMatches"]
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>@Localizer["Team1"]</th>
                    <th>@Localizer["Team2"]</th>
                    <th>@Localizer["Timeleft"]</th>
                    <th>@Localizer["Score"]</th>
                    <th>@Localizer["Status"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Matches != null)
                {
                    @foreach (var match in Matches)
                    {
                        <tr>
                            <td>
                                @if (!match.Team1Id.HasValue || match.Team1Id.Value == 0)
                                {
                                    @match.NameTeam1;
                                }
                                else
                                {
                                    @TeamList.Single(x => x.Id == match.Team1Id).Name;
                                }
                            </td>
                            <td>
                                @if (!match.Team2Id.HasValue || match.Team2Id.Value == 0)
                                {
                                    @match.NameTeam2;
                                }
                                else
                                {
                                    @TeamList.Single(x => x.Id == match.Team2Id).Name;
                                }
                            </td>
                            <td>@((int)(match.MatchStatus) < 20 ? match.ScheduledTime.Value.ToString() : SecondsToTime(match.TimeLeftSeconds ?? 0))</td>
                            <td>@(match.ScoreTeam1 ?? 0) : @(match.ScoreTeam2 ?? 0)</td>
                            <td>@Localizer["MatchStatus" + Enum.GetName(typeof(MatchLibrary.Model.EnumMatchStatus), @match.MatchStatus)]</td>
                            <td><a href="/match/@match.Id">@Localizer["Manage"]</a></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    <br />
    <div class="panel">
        @*<h3>Turnier Details ändern</h3>*@
        <button class="btn btn-primary" @onclick="e => this.EditCollapsed = !this.EditCollapsed">
            @( this.EditCollapsed ? Localizer["ShowDetails"] : Localizer["HideDetails"])
        </button>
        <div class="panel @(EditCollapsed?"collapse":"")">
            <EditForm Model="@Tournament" OnValidSubmit="@SaveTournament">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <a>@Localizer["Name"]</a>
                <InputText id="txtTournamentName" type="text" class="form-control" @bind-Value="Tournament.Name" />
                <ValidationMessage For="@(() => Tournament.Name)" />
                <br />

                <a>@Localizer["Date"]</a>
                <InputDate id="txtTournamentDate" type="date" class="form-control" @bind-Value="Tournament.Date" />
                <ValidationMessage For="@(() => Tournament.Date)" />
                <br />

                <a>@Localizer["City"]</a>
                <InputText id="txtTournamentCity" type="text" class="form-control" @bind-Value="Tournament.City" />
                <ValidationMessage For="@(() => Tournament.City)" />
                <br />

                <a>@Localizer["Location"]</a>
                <InputText id="txtTournamentLocation" type="text" class="form-control" @bind-Value="Tournament.Location" />
                <ValidationMessage For="@(() => Tournament.Location)" />
                <br />

                <a>@Localizer["Organizer"]</a>
                <InputText id="txtTournamentOrganisator" type="text" class="form-control" @bind-Value="Tournament.Organisator" />
                <ValidationMessage For="@(() => Tournament.Organisator)" />
                <br />

                <button class="btn btn-primary" type="submit">@Localizer["Save"]</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private DtoTournament Tournament;
    private List<DtoMatch> Matches;
    private List<DtoTeam> TeamList;
    private bool EditCollapsed = true;

    [Parameter]
    public string Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Settings.SelectedTournamentId != 0)
        {
            Tournament = await ApiSrv.GetTournamentAsync(Convert.ToInt32(Id));
            Matches = await ApiSrv.GetMatchListAsync(Tournament.Id) ?? new List<DtoMatch>();
            TeamList = await ApiSrv.GetTeamListAsync();
        }
    }

    private async void SaveTournament()
    {
        await ApiSrv.SetTournamentAsync(Tournament);
        NavigationManager.NavigateTo("/tournament");
    }

    private string SecondsToTime(int seconds)
    {
        return ((seconds / 60).ToString("D2") + ":" + (seconds % 60).ToString("D2"));
    }
}